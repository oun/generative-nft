import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Mint from "../components/Mint";
import Redeem from "../components/Redeem";
import Wallet from "../components/Wallet";
import contract from "../contracts/NFT.json";
import { useTokenBalance } from "../hooks/useContract";

interface Props {
  contractInterface: any;
  contractAddress: string;
  maxSupply: number;
  maxMintPerAccount: number;
  maxWhitelistMintPerAccount: number;
  publicMintPrice: number;
  whitelistMintPrice: number;
  whitelistSale: boolean;
  publicSale: boolean;
}

const Home: NextPage<Props> = ({
  contractInterface,
  contractAddress,
  maxSupply,
  maxMintPerAccount,
  maxWhitelistMintPerAccount,
  publicMintPrice,
  whitelistMintPrice,
  whitelistSale,
  publicSale,
}) => {
  const [balance, mint, redeem] = useTokenBalance(
    contractAddress,
    contractInterface
  );

  const onMint = async (quantity: number) => {
    return await mint(quantity, publicMintPrice);
  };

  const onWhitelistMint = async (quantity: number, signature: string) => {
    return await redeem(quantity, whitelistMintPrice, signature);
  };

  const renderMintButton = () => {
    if (publicSale) {
      return (
        <Mint
          balance={balance}
          contractAddress={contractAddress}
          contractInterface={contractInterface}
          maxMintPerAccount={maxMintPerAccount}
          mintPrice={publicMintPrice}
          maxSupply={maxSupply}
          onSubmit={onMint}
        />
      );
    } else if (whitelistSale) {
      return (
        <Redeem
          balance={balance}
          contractAddress={contractAddress}
          contractInterface={contractInterface}
          maxMintPerAccount={maxWhitelistMintPerAccount}
          mintPrice={whitelistMintPrice}
          maxSupply={maxSupply}
          onSubmit={onWhitelistMint}
        />
      );
    }
  };

  return (
    <div className="container mx-auto min-h-screen flex flex-col">
      <Head>
        <title>NFT</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className="grid p-4 grid-rows-1 grid-cols-3">
        <div className="text-lg justify-center items-center text-white">
          NFT Logo
        </div>
        <nav className="text-lg flex grow justify-center items-center gap-4 text-white">
          <a href="#about">About</a>
          <a href="#mint">Mint</a>
          <a href="#">Collection</a>
          <a href="#">Team</a>
        </nav>
        <div className="flex justify-end">
          <div className="text-lg justify-center items-center text-white">
            <Wallet />
          </div>
        </div>
      </header>

      <main className="flex-col">
        <section
          id="about"
          className="flex flex-col items-center justify-center min-h-screen"
        >
          <h1 className="text-5xl text-white p-2">Welcome to NFT</h1>
          <div className="text-lg text-white p-4 w-1/3 text-center">
            {maxSupply} unique collectible with proof of ownership stored on the
            Ethereum blockchain.
          </div>
        </section>
        <section
          id="mint"
          className="flex flex-col items-center justify-center min-h-screen"
        >
          <div className="">{renderMintButton()}</div>
        </section>
      </main>
    </div>
  );
};

export const getStaticProps: GetStaticProps = async () => {
  return {
    props: {
      contractInterface: contract.abi,
      contractAddress: process.env.NFT_CONTRACT_ADDRESS!,
      maxSupply: +process.env.MAX_SUPPLY!,
      maxMintPerAccount: +process.env.MAX_MINT_PER_ACCOUNT!,
      maxWhitelistMintPerAccount: +process.env.MAX_WHITELIST_MINT_PER_ACCOUNT!,
      publicMintPrice: +process.env.PUBLIC_MINT_PRICE!,
      whitelistMintPrice: +process.env.WHITELIST_MINT_PRICE!,
      whitelistSale: process.env.WHITELIST_SALE === "true",
      publicSale: process.env.PUBLIC_SALE === "true",
    },
  };
};

export default Home;
